AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  FitNSS

Parameters:
  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment
  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE, OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  AccessDynamoDBTablesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessExerciseTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Exercises'
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Exercises/index/*'
        - PolicyName: 'AccessWorkoutPlanTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/WorkoutPlan'


  CreateExerciseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: FitNSS
      Handler: lambda.CreateExerciseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FitNSS:
          Type: Api
          Properties:
            Path: /exercises
            Method: post
  GetExerciseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: FitNSS
      Handler: lambda.GetExerciseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FitNSS:
          Type: Api
          Properties:
            Path: /exercises/{exerciseId}
            Method: get
  GetAllExercisesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: FitNSS
      Handler: lambda.GetAllExercisesLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FitNSS:
          Type: Api
          Properties:
            Path: /exercises
            Method: get
  UpdateExerciseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: FitNSS
      Handler: lambda.UpdateExerciseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FitNSS:
          Type: Api
          Properties:
            Path: /exercises/{exerciseId}
            Method: put
  DeleteExerciseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: FitNSS
      Handler: lambda.DeleteExerciseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FitNSS:
          Type: Api
          Properties:
            Path: /exercises/{exerciseId}
            Method: delete

  #-----------------------------------------------------------------

  ExercisesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "exerciseId"
          AttributeType: "S"
        - AttributeName: "workingMuscle"
          AttributeType: "S"
        - AttributeName: "exerciseMovementGroup"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "exerciseId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "Exercises"
      GlobalSecondaryIndexes:
        - IndexName: "ExerciseByMovementIndex"
          KeySchema:
            - AttributeName: "exerciseMovementGroup"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "ExerciseByMuscleIndex"
          KeySchema:
            - AttributeName: "workingMuscle"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  WorkoutPlanTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "workoutPlanId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "workoutPlanId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "WorkoutPlan"